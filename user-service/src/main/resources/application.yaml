logging:
  level:
    ROOT: INFO
    com.mfm.user.user_service.client: ${CLIENT_LOG_LEVEL:DEBUG}
  include-application-name: false
  pattern:
    correlation: '[%X{X-Trace-Id:-}]'

server:
  port: ${PORT:8081}
  servlet:
    context-path: /user/api
  tomcat:
    connection-timeout: 1000

dynamic:
  query:
    timeout: ${DINAMIC_TIME_OUT:5000}

spring:
  application:
    name: user-service
  messages:
    basename: i18n/messages
    encoding: UTF-8
  datasource:
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/db_01?currentSchema=ms_user
    username: ${DB_USER}
    password: ${DB_PASSWORD}
  sql:
    init:
      mode: always
      schema-locations: classpath:db/changelog/1.0-create_schema.sql
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    database: POSTGRESQL
    show-sql: false
    open-in-view: false
    properties:
      hibernate:
        format_sql: true
        jdbc.batch_size: 50
        order_inserts: true
      jakarta:
        persistence:
          query:
            timeout: ${QUERY_TIME_OUT:3000}
    hibernate:
      dialect: org.hibernate.dialect.PostgreSQLDialect
      ddl-auto: 'none'
  liquibase:
    enabled: true
    default-schema: ms_user
    change-log: classpath:db/changelog-master.xml
  cloud:
    openfeign:
      compression:
        request:
          enabled: true
        response:
          enabled: true
      client:
        config:
          default:
            connectTimeout: 5000
            readTimeout: 10000
            loggerLevel: full
            requestInterceptors:
              - com.mfm.user.user_service.client.interceptor.DefaultInterceptor
          access-client:
            url: http://localhost:8082/access/api
            defaultRequestHeaders:
              Authorization: none
            requestInterceptors:
              - com.mfm.user.user_service.client.interceptor.AccessInterceptor
            #errorDecoder: com.mfm.user.user_service.client.decode.AccessErrorDecoder
  security:
    user:
      name: ${SECURITY_USERNAME:client}
      password: ${SECURITY_PASSWORD:client}
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8080/realms/ms-poc-realm/protocol/openid-connect/certs
  boot:
    admin:
      client:
        enabled: ${ENABLE_ADMIN_CLIENT:true}
        url: ${SPRING_ADMIN_API:http://localhost:8089/admin}
        username: ${SPRING_ADMIN_USERNAME:admin}
        password: ${SPRING_ADMIN_PASSWORD:admin}
        instance:
          # URL base para calcular o service-url com o qual se registrar. O caminho é inferido em tempo de execução e anexado à url base.
          service-base-url: ${SERVICE_BASE_URL:http://localhost:8081}
          # Essas informações são passadas ao servidor para que ele possa fazer o acesso aos endpoints do sistema cliente.
          metadata:
            user:
              name: ${SPRING_ADMIN_CLIENT_USERNAME:client}
              password: ${SPRING_ADMIN_CLIENT_PASSWORD:client}
        auto-deregistration: true

management:
  info:
    env:
      enabled: true
  endpoint:
    env:
      show-values: ALWAYS
      post:
        enabled: true
    health:
      show-details: ALWAYS
      enabled: true
    configprops:
      show-values: ALWAYS
    shutdown:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"

javers:
  sqlSchema: ms_user
  sqlSchemaManagementEnabled: true
  sqlGlobalIdCacheDisabled: false
  objectAccessHook: org.javers.hibernate.integration.HibernateUnproxyObjectAccessHook

---
spring:
  config:
    activate:
      on-profile: "cloud"
  cloud:
    openfeign:
      client:
        config:
          access-client:
            url: ${ACCESS_API}
  datasource:
    url: jdbc:postgresql://postgres_db:5432/db_01?currentSchema=ms_user
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://keycloak:8080/realms/ms-poc-realm/protocol/openid-connect/certs

server:
  servlet:
    context-path: /